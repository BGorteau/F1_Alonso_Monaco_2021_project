fbasis <- create.fourier.basis(rangeval = c(0,1), nbasis = 9,period=1)
fbasis
plot(fbasis)
bmatrix <- getbasismatrix(seq(0,1, 0.01), basisobj = fbasis, nderiv = 1)
matplot(bmatrix, type="l")
bmatrix <- getbasismatrix(seq(0,1, length.out = 100), basisobj = fbasis, nderiv = 1)
matplot(bmatrix, type="l")
bmatrix <- getbasismatrix(seq(0,1,0.01), basisobj = fbasis, nderiv = 1)
matplot(bmatrix, type="l")
?eval.basis
# Question 3
eval.basis(seq(0,1,0.01), fbasis)
# Question 3
ebasis <- eval.basis(seq(0,1,0.01), fbasis)
matplot(ebasis, type="l")
base <- create.fourier.basis(nbasis = 9, period = 1)
plot(base)
?apply
t(cj*t(ebasis))
cj = runif(9, -1, 1)
t(cj*t(ebasis))
t(ebasis)
j=9
for (i in 1:30){
cj = runif(j, -1, 1)
ft=apply(t(cj*t(ebasis)), 1, sum)
plot(ft, type='l')
}
t(cj*t(ebasis))
apply(t(cj*t(ebasis)), 1, sum)
j=9
for (i in 1:30){
cj = runif(j, -1, 1)
ft=apply(t(cj*t(ebasis)), 1, sum)
lines(ft, type='l')
}
j=9
for (i in 1:30){
cj = runif(j, -1, 1)
ft=apply(t(cj*t(ebasis)), 1, sum)
plot(ft, type='l')
}
help(create.fourier.basis)
# Question 5
base <- create.fourier.basis(rangeval = seq(0,1,0.01), nbasis = 15)
# Question 5
base <- create.fourier.basis(rangeval = c(0,1), nbasis = 15)
ebasis2 <- eval.basis(seq(0,1,0.01), base)
plot(base)
base <- create.fourier.basis(rangeval = c(0,1), nbasis = 16)
ebasis2 <- eval.basis(seq(0,1,0.01), base)
j=16
for (i in 1:30){
cj = runif(j, -1, 1)
ft=apply(t(cj*t(ebasis)), 1, sum)
plot(ft, type='l')
}
j=16
for (i in 1:30){
cj = runif(j, -1, 1)
ft=apply(t(cj*t(ebasis2)), 1, sum)
plot(ft, type='l')
}
warnings()
base <- create.fourier.basis(rangeval = c(0,1), nbasis = 16)
ebasis2 <- eval.basis(seq(0,1,0.01), base)
j=16
for (i in 1:30){
cj = runif(j, -1, 1)
ft=apply(t(cj*t(ebasis2)), 1, sum)
plot(ft, type='l')
}
ebasis
ebasis2
base <- create.fourier.basis(rangeval = c(0,1), nbasis = 16)
ebasis2 <- eval.basis(seq(0,1,0.01), base)
j=16
for (i in 1:30){
cj = runif(j, -1, 1)
ft=apply(t(cj*t(ebasis2)), 1, sum)
plot(ft, type='l')
}
ebasis <- eval.basis(seq(0,1,0.01), fbasis)
matplot(ebasis, type="l")
plot(fbasis)
ebasis <- eval.basis(seq(0,1,0.01), fbasis)
matplot(ebasis, type="l")
options(device = "RStudioGD")
plot(1,2)
plot(c(1,2), c(2,4))
plot(c(1,3,4), c(2,3,1))
dev.off()
install.packages("fda")
# Librairies
library(fda)
?create.bspline.basis
create.bspline.basis(rangeval = c(norder = 4, breaks = seq(0,1,15))
create.bspline.basis(norder = 4, breaks = seq(0,1,15))
plot(create.bspline.basis(norder = 4, breaks = seq(0,1,15)))
plot(create.bspline.basis(rangeval=c(0,1),norder = 4, breaks = seq(0,1,length=15)))
# Question 1.b
plot(create.bspline.basis(rangeval=c(0,1),norder = 4, breaks = runif(15,0,1)))
# Question 1.b
plot(create.bspline.basis(rangeval=c(0,1),norder = 4, breaks = order(runif(15,0,1))))
# Question 1.b
plot(create.bspline.basis(rangeval=c(0,1),norder = 4, breaks = seq(order(runif(15,0,1)))))
# Question 1.b
sequence = runif(15,0,1)
plot(create.bspline.basis(rangeval=c(0,1),norder = 4, breaks =seq(order(sequence))))
plot(create.bspline.basis(norder = 4, breaks =seq[order(seq)]))
seq <- c(0,runif(13,0,1),1)
plot(create.bspline.basis(norder = 4, breaks =seq[order(seq)]))
# Question 1.c
plot(create.bspline.basis(rangeval = c(0,1), norder = 2, breaks = seq(0,1,8)))
# Question 1.c
plot(create.bspline.basis(rangeval = c(0,1), norder = 2, breaks = seq(0,1,8)))
seq(0,1,8)
# Question 1.c
plot(create.bspline.basis(rangeval = c(0,1), norder = 2, breaks = seq(0,1,length=8)))
# Question 1.d
plot(create.bspline.basis(rangeval = c(0,1), norder = 6, breaks = seq(0,1,length=13)))
dev.off(1)
dev.off()
library(kernlab)
library(caret)
library(randomForest)
library(parallel)
library(doParallel)
data(spam)
help(spam)
summary(spam)
indextrainspam <- caret::createDataPartition(spam$type, p=1/2, list=FALSE)
dtrain <- spam[indextrainspam,]
dval <- spam[-indextrainspam,]
Xtrain <- spam[indextrainspam,1:(length(spam)-1)]
Ytrain <- spam[indextrainspam,length(spam)]
Xval <- spam[-indextrainspam,1:(length(spam)-1)]
Yval <- spam[-indextrainspam,length(spam)]
reg.log <- glm(type~., data=dtrain,family = binomial)
pred <- ifelse(predict(reg.log, newdata=dval, type="response")>=0.5,"spam","nonspam")
risque.est <- data.frame(Reg_log=mean(Yval!=pred))
reg.log <- glm(type~., data=dtrain,family = binomial)
pred <- ifelse(predict(reg.log, newdata=dval, type="response")>=0.5,"spam","nonspam")
risque.est <- data.frame(Reg_log=mean(Yval!=pred))
print(risque.est)
cl <- makeCluster(detectCores()-2)
registerDoParallel(cl)
pargrid <- data.frame(C=10^(-4:2))
detectCores()
cl <- makeCluster(detectCores()-2)
registerDoParallel(cl)
pargrid <- data.frame(C=10^(-4:2))
tune_control <- caret::trainControl(method = "repeatedcv",number=5,repeats = 5, allowParallel = TRUE)
svm.lin.opt <- caret::train(type~., data=dtrain, method="svmLinear", tuneGrid=pargrid,trControl=tune_control,allowParallel=TRUE)
stopCluster(cl);
attributes(svm.lin.opt)
ggplot2::ggplot(svm.lin.opt)
pred <- predict(svm.lin.opt$finalModel,Xval)
risque.est <- cbind(risque.est, data.frame(SVM_lin=mean(Yval!=pred)))
print(risque.est)
pargrid <- expand.grid(sigma=10^(-4:0),C=10^(-4:2))
tune_control <- caret::trainControl(method="repeatedcv",number=5, repeats=5, allowParallel = TRUE)
cl <- makeCluster(detectCores()-2)
registerDoParallel(cl)
svm.nlin.opt <- caret::train(type~., data=dtrain, method="svmRadialSigma", tuneGrid=pargrid, trControl = tune_control, allowParallel = TRUE)
stopCluster(cl)
ggplot2::ggplot(svm.nlin.opt)
install.packages("viridis")
library(fda)
library(tidyfun)
install.packages("tidyfun")
library(fda)
#library(tidyfun)
library(viridis)
library(tidyverse)
library(RColorBrewer)
data("CanadianWeather")
?CanadianWeather
i=1
y = CanadianWeather$dailyAv[,i,1]
plot(y,pch=20,main=paste("Temperatures moyennes à ", CanadianWeather$place[i],sep=""),xlab="jour",ylab="temperature")
splbasis = create.bspline.basis(rangeval=c(1,365),norder=4,breaks=seq(1,365,length=8))
Phi = getbasismatrix(1:365,splbasis)
chat = solve(crossprod(Phi),crossprod(Phi,y))
chat
fhat = fd(chat,splbasis)
plot(y,pch=20,cex=0.5)
lines(fhat,col=4,lwd=2)
chat2 = Data2fd(1:365,y,basisobj = splbasis)
fhat2 = eval.fd(1:365,chat2)
cbind(chat2$coefs,chat)
plot(y,pch=20,cex=0.5)
lines(fhat2,col=4,lwd=2)
norder = c(2,3,4,6)
par(mfrow=c(2,2))
for(d in norder){
splbasis = create.bspline.basis(rangeval=c(1,365),norder=d,breaks=seq(1,365,length=8))
chat = Data2fd(1:365,y,basisobj = splbasis)
fhat = eval.fd(1:365,chat)
plot(y,pch=20,cex=0.5,main=paste("ordre = ",d,sep=""),xlab="jour",ylab="temperature")
lines(fhat,col=4,lwd=2)
}
noeuds = c(2,4,8,20)
par(mfrow=c(2,2))
for(l in noeuds){
splbasis = create.bspline.basis(rangeval=c(1,365),norder=4,breaks=seq(1,365,length=l))
chat = Data2fd(1:365,y,basisobj = splbasis)
fhat = eval.fd(1:365,chat)
plot(y,pch=20,cex=0.5,main=paste("nombre de noeuds = ",l,sep=""),xlab="jour",ylab="temperature")
lines(fhat,col=4,lwd=2)
}
splbasis = create.bspline.basis(rangeval=c(1,365),norder=4,breaks=seq(1,365,length=8))
chat = Data2fd(argvals=1:365,y=CanadianWeather$dailyAv[,,1],basisobj = splbasis)
head(chat$coefs)
fhatspl = eval.fd(1:365,chat)
par(mfrow=c(1,2))
matplot(1:365,CanadianWeather$dailyAv[,,1],type="l",main="courbes observées",xlab="jour",ylab="temperature")
matplot(1:365,fhatspl,type="l",main="courbes lissées",xlab="jour",ylab="temperature")
fbasis = create.fourier.basis(rangeval=c(1,365),nbasis=9)
chatf = Data2fd(1:365,y,basisobj = fbasis)
fhat = eval.fd(1:365,chatf)
plot(y,pch=20,cex=0.5)
lines(fhat,col=4,lwd=2)
chat = Data2fd(argvals=1:365,y=CanadianWeather$dailyAv[,,1],basisobj = fbasis)
chat$coefs[1:5,1:5]
fhatfourier = eval.fd(1:365,chat)
par(mfrow=c(1,2))
matplot(1:365,CanadianWeather$dailyAv[,,1],type="l",main="courbes observées",xlab="jour",ylab="temperature")
matplot(1:365,fhatfourier,type="l",main="courbes lissées",xlab="jour",ylab="temperature")
par(mfrow=c(1,2))
matplot(1:365,fhatspl,type="l",main="B-splines",xlab="jour",ylab="temperature")
matplot(1:365,fhatfourier,type="l",main="Fourier",xlab="jour",ylab="temperature")
splbasis = create.bspline.basis(rangeval=c(1,365),norder=4,breaks=seq(1,365,length=8))
chatsb = smooth.basis(argvals=1:365,y,fdParobj = splbasis)
cbind(chat,chatsb$fd$coefs)
splbasis365 = create.bspline.basis(c(1,365),norder=4,breaks=1:365)
gcv = 1:21
for (i in 1:21){
lambda = exp(i-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,y,fdParobj = fdparTemp)
gcv[i] = smoothdata$gcv
}
plot(gcv)
which.min(gcv)
lambda = exp(which.min(gcv)-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,y,fdParobj = fdparTemp)
plotfit.fd(y,1:365,smoothdata$fd,pch=20,cex=0.5)
splbasis365 = create.bspline.basis(c(1,365),norder=4,breaks=1:365)
gcv = 1:21
for (i in 1:21){
lambda = exp(i-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,CanadianWeather$dailyAv[,,1],fdParobj = fdparTemp)
gcv[i] = mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
lambda = exp(which.min(gcv)-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,CanadianWeather$dailyAv[,,1],fdParobj = fdparTemp)
# plotfit.fd(CanadianWeather$dailyAv[,,1],1:365,smoothdata$fd,pch=20,cex=0.5) # attention, fait les graphes courbe par courbe
fhatsmooth = eval.fd(1:365,smoothdata$fd)
par(mfrow=c(1,2))
matplot(1:365,CanadianWeather$dailyAv[,,1],type="l",lty=1,ylab="",main="donnees brutes")
matplot(1:365,fhatsmooth,type="l",lty=1,ylab="",main="donnees lissees")
matplot(1:365,fhatsmooth-CanadianWeather$dailyAv[,,1],lty=1,type="l",ylab="residus")
splbasis365 = create.bspline.basis(c(1,365),norder=4,breaks=seq(1,365,20))
gcv = 1:21
for (i in 1:21){
lambda = exp(i-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,y,fdParobj = fdparTemp)
gcv[i] = smoothdata$gcv
}
plot(gcv)
which.min(gcv)
lambda = exp(which.min(gcv)-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,y,fdParobj = fdparTemp)
plotfit.fd(y,1:365,smoothdata$fd,pch=20,cex=0.5)
splbasis365 = create.bspline.basis(c(1,365),norder=4,breaks=seq(1,365,20))
gcv = 1:21
for (i in 1:21){
lambda = exp(i-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,CanadianWeather$dailyAv[,,1],fdParobj = fdparTemp)
gcv[i] = mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
lambda = exp(which.min(gcv)-10)
fdparTemp = fdPar(splbasis365,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(1:365,CanadianWeather$dailyAv[,,1],fdParobj = fdparTemp)
fhatsmooth = eval.fd(1:365,smoothdata$fd)
par(mfrow=c(1,2))
matplot(1:365,CanadianWeather$dailyAv[,,1],type="l",lty=1,ylab="",main="donnees brutes")
matplot(1:365,fhatsmooth,type="l",lty=1,ylab="",main="donnees lissees")
data("growth")
y <- growth$hgtm[,1]
y
# Courbe du premier garçon dans 'growth' :
y
len(y)
length(y)
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=4,breaks=seq(1,length(y),length(y)))
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=4,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparTemp)
gcv[i] <- mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=4,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
plot(splbasisGrwth)
?fdPar
fdPar(splbasisGrwth,Lfdobj = 2,lambda=exp(8))
fdParGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=exp(8))
smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
lambda <- exp(which.min(gcv)-10)
fdparTemp <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
plotfit.fd(y,1:length(y),smoothdata$fd,pch=20,cex=0.5)
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=6,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
lambda <- exp(which.min(gcv)-10)
fdparTemp <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
plotfit.fd(y,1:length(y),smoothdata$fd,pch=20,cex=0.5)
smoothdata
lambda <- exp(which.min(gcv)-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
plotfit.fd(y,1:length(y),smoothdata$fd,pch=20,cex=0.5)
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=4,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
lambda <- exp(which.min(gcv)-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
plotfit.fd(y,1:length(y),smoothdata$fd,pch=20,cex=0.5)
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=2,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=3,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=4,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
lambda <- exp(which.min(gcv)-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
plotfit.fd(y,1:length(y),smoothdata$fd,pch=20,cex=0.5)
smoothdata$fd
?mean
?smooth.basis
bmatrix <- getbasismatrix(seq(1,length(y)), basisobj = splbasisGrwth, nderiv = 1)
matplot(bmatrix, type="l")
smoothdata$fd
plot(smoothdata$fd$coefs)
plot(smoothdata$fd$coefs, type="l")
splbasisGrwth <- create.bspline.basis(c(1,18),norder=4,breaks=seq(1,18,length(y)))
splbasisGrwth <- create.bspline.basis(c(1,18),norder=4,breaks=seq(1,18))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
splbasisGrwth <- create.bspline.basis(c(1,18),norder=4,breaks=seq(1,18))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:18,y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
lambda <- exp(which.min(gcv)-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
splbasisGrwth <- create.bspline.basis(c(1,length(y)),norder=4,breaks=seq(1,length(y)))
gcv <- 1:21
for (i in 1:21){
lambda <- exp(i-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
gcv[i] <- mean(smoothdata$gcv)
}
plot(gcv)
which.min(gcv)
lambda <- exp(which.min(gcv)-10)
fdparGrowth <- fdPar(splbasisGrwth,Lfdobj = 2,lambda=lambda)
smoothdata <- smooth.basis(1:length(y),y,fdParobj = fdparGrowth)
plotfit.fd(y,1:length(y),smoothdata$fd,pch=20,cex=0.5)
library(fda)
library(wavethresh)
install.packages("wavetresh")
library(readr)
library(ggplot2)
library(cluster)
library(dplyr)
library(tidyr)
library(ggdendro)
library(FactoMineR)
library(dbscan)
library(kernlab)
library(igraph)
tbl <- read_delim("data/donclassif.txt", delim=";")
ggplot(tbl)+aes(x=V1,y=V2)+geom_point()
kmeans_tbl <- kmeans(tbl, centers= 4, nstart = 100)
tbl1 <- tbl |> mutate(`K=4`=kmeans_tbl$cluster)
ggplot(tbl1)+aes(x=V1,y=V2, color = as.factor(`K=4`))+geom_point()+labs(color="K=4")
nom <- paste("K=",5:9,sep="")
mat <- matrix(0,ncol=5,nrow=nrow(tbl))
k <- 5:9
for (j in 1:5){
res <- kmeans(tbl,centers = k[j],nstart = 100)
mat[,j] <- res$cluster
}
mat1 <- as_tibble(mat)
names(mat1) <- nom
(tbl2 <- tbl1 |> bind_cols(mat1))
tbl3 <- tbl2 |>
pivot_longer(-c(V1,V2), names_to = "Nb_clust", values_to="groupes") |>
mutate(groupes=as.factor(groupes))
ggplot(tbl3)+aes(x=V1,y=V2,color=groupes)+geom_point()+facet_wrap(~Nb_clust)
DD <- dist(tbl)
ward <- hclust(DD, method = "ward.D2")
single <- hclust(DD, method = "single")
complete <- hclust(DD, method = "complete")
average <- hclust(DD,method = "average")
ggdendrogram(ward)
ggdendrogram(single)
ggdendrogram(complete)
ggdendrogram(average)
ward8 <- cutree(ward, k= 8)
single8 <- cutree(single, k=8)
complete8 <- cutree(complete, k=8)
average8 <- cutree(average, k=8)
tbl_cah <- tbl |> mutate(
ward=ward8,
single=single8,
complete=complete8,
average=average8
)
tbl1_cah <- tbl_cah |> pivot_longer(-c(V1, V2), names_to = "Nb_clust",
values_to = "groupes") |>
mutate(groupes=as.factor(groupes))
ggplot(tbl1_cah) + aes(x=V1, y=V2, color=groupes)+geom_point() +facet_wrap(~ Nb_clust)
single100 <- cutree(single, k=100)
table(single100)
keep_groupe <- which(table(single100)>=100)
tbl100 <- tbl |>
mutate(single100=single100) |>
filter(single100 %in% keep_groupe) |>
mutate(single100=as.factor(single100))
ggplot(tbl100)+aes(x = V1, y=V2, color=single100)+geom_point()
tbl <- read_delim("data/donclassif2.txt", delim=";")
dim(tbl)
DD <- dist(tbl)
DD <- dist(tbl)
DD <- dist(tbl)
DD <- dist(tbl)
cd R
setwd("~/R/M2 MAS/Analyse du signal/projet")
